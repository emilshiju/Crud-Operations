export const getFlashMessages = (req, sessionKeyName, type, onConsumeFlash) => {
    if (req.session[sessionKeyName] === undefined ||
        req.session[sessionKeyName][type] === undefined) {
        onConsumeFlash?.(type, []);
        return [];
    }
    const flashMessages = req.session[sessionKeyName][type];
    req.session[sessionKeyName];
    delete req.session[sessionKeyName][type];
    onConsumeFlash?.(type, flashMessages);
    return flashMessages;
};
const expressFlashMessage = (option) => {
    return async (req, res, next) => {
        const { onAddFlash, onConsumeFlash, sessionKeyName } = option;
        if (sessionKeyName === undefined) {
            throw new Error('You must provide a session key name for express flash messages');
        }
        if (req.session === undefined) {
            throw new Error('Request cannot find session, please make sure you install express-session or cookie-session first');
        }
        res.flash = (type, message) => {
            if (req.session[sessionKeyName] === undefined) {
                req.session[sessionKeyName] = {};
            }
            if (req.session[sessionKeyName][type] === undefined) {
                req.session[sessionKeyName][type] = [];
            }
            req.session[sessionKeyName][type].push(message);
            onAddFlash?.(type, message);
        };
        const originalRender = res.render.bind(res);
        res.render = function (view, data, callback) {
            originalRender(view, {
                ...data,
                getFlashMessages: (type) => getFlashMessages(req, sessionKeyName, type, onConsumeFlash),
            }, callback);
        };
        await next();
    };
};
export default expressFlashMessage;
